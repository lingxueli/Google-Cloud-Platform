Configuring an HTTP Load Balancer with Autoscaling

Overview
Google Cloud HTTP(S) load balancing is implemented at the edge of Google's network in Google's points of presence (POP) around the world. User traffic directed to an HTTP(S) load balancer enters the POP closest to the user and is then load-balanced over Google's global network to the closest backend that has sufficient available capacity.

In this lab, you configure an HTTP load balancer as shown in the diagram. Then, you stress test the load balancer to demonstrate global load balancing and autoscaling.

Objectives
In this lab, you learn how to perform the following tasks:

Create a health check firewall rule
Create a NAT configuration using Cloud Router
Create a custom image for a web server
Create an instance template based on the custom image
Create two managed instance groups
Configure an HTTP load balancer with IPv4 and IPv6
Stress test an HTTP load balancer

https://googlecoursera.qwiklabs.com/focuses/12207799?parent=lti_session

Tip 1:

Reset VM will stop and reboot the machine. It keeps the same IPs and the same persistent boot disk, but memory is wiped. Therefore, if the Apache service is available after the reset, the update-rc(start on boot) command was successful.

# install Apache
sudo apt-get update
sudo apt-get install -y apache2

# start Apache
sudo service apache2 start

# set Apache to start on boot
sudo update-rc.d apache2 enable

# check status
googleod526386_student@webserver:~$ sudo service apache2 status
● apache2.service - The Apache HTTP Server
   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)
   Active: active (running) since Tue 2020-11-03 04:37:59 UTC; 3min 11s ago
     Docs: https://httpd.apache.org/docs/2.4/
  Process: 365 ExecStart=/usr/sbin/apachectl start (code=exited, status=0/SUCCESS)
 Main PID: 506 (apache2)
    Tasks: 55 (limit: 627)
   Memory: 13.0M
   CGroup: /system.slice/apache2.service
           ├─506 /usr/sbin/apache2 -k start
           ├─508 /usr/sbin/apache2 -k start
           └─509 /usr/sbin/apache2 -k start

Nov 03 04:37:58 webserver systemd[1]: Starting The Apache HTTP Server...
Nov 03 04:37:59 webserver systemd[1]: Started The Apache HTTP Server.

Tip 2:

Steps to create a customed image:

Create the VM -> Customize the VM -> Delete the VM but keep the boot disk -> Create an image from the disk -> Delete the disk

Then you have created a custom image that multiple identical webservers can be started from.




