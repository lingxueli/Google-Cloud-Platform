Working with Cloud Build

In this lab you will build a Docker container image from provided code and a Dockerfile using Cloud Build. You will then upload the container to Container Registry.

Objectives
In this lab, you learn how to perform the following tasks:

Use Cloud Build to build and push containers

Use Container Registry to store and deploy containers

1. Building Containers with DockerFile and Cloud Build

dockerfile

FROM alpine
COPY quickstart.sh /
CMD ["/quickstart.sh"]

gcloud builds submit --tag gcr.io/${GOOGLE_CLOUD_PROJECT}/quickstart-image .

2. Building Containers with a build configuration file and Cloud Build

# Download
git clone https://github.com/GoogleCloudPlatform/training-data-analyst

# Create a soft link as a shortcut to the working directory
ln -s ~/training-data-analyst/courses/ak8s/v1.1 ~/ak8s

# build configuration file
cd ~/ak8s/Cloud_Build/a

student_00_725a4aa51b3f@cloudshell:~/ak8s/Cloud_Build/a (qwiklabs-gcp-00-b9b10a3b06de)$ cat cloudbuild.yaml
steps:
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/quickstart-image', '.' ]
images:
- 'gcr.io/$PROJECT_ID/quickstart-image'
student_00_725a4aa51b3f@cloudshell:~/ak8s/Cloud_Build/a (qwiklabs-gcp-00-b9b10a3b06de)$ ls
cloudbuild.yaml  Dockerfile  quickstart.sh

# This file instructs Cloud Build to use Docker to build an image using the Dockerfile specification in the current local directory, tag it with gcr.io/$PROJECT_ID/quickstart-image ($PROJECT_ID is a substitution variable automatically populated by Cloud Build with the project ID of the associated project) and then push that image to Container Registry.

# execute the following command to start a Cloud Build using cloudbuild.yaml as the build configuration file
gcloud builds submit --config cloudbuild.yaml 

3. Building and Testing Containers with a build configuration file and Cloud Build

cd ~/ak8s/Cloud_Build/b
student_00_725a4aa51b3f@cloudshell:~/ak8s/Cloud_Build/b (qwiklabs-gcp-00-b9b10a3b06de)$ cat cloudbuild.yaml
steps:
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/quickstart-image', '.' ]
- name: 'gcr.io/$PROJECT_ID/quickstart-image'
  args: ['fail']
images:
- 'gcr.io/$PROJECT_ID/quickstart-image'

# In addition to its previous actions, this build configuration file runs the quickstart-image it has created. In this task, the quickstart.sh script has been modified so that it simulates a test failure when an argument ['fail'] is passed to it.

gcloud builds submit --config cloudbuild.yaml .
# failed
student_00_725a4aa51b3f@cloudshell:~/ak8s/Cloud_Build/b (qwiklabs-gcp-00-b9b10a3b06de)$ echo $?
1
# The command will reply with a non-zero value. If you had embedded this build in a script, your script would be able to act up on the build's failure.

